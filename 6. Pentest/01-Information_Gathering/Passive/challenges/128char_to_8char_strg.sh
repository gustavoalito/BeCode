#!/bin/bash

# Define the 128-character input string // SHA2
input="acdd373658c31d7b69209654f4342accd6b537c22d90675abf614f673bd55795adec467b460e77c3696fdd91deec02cfa2fb9ae6c1bbc4bd1e804000d326c098"

# Check if the input is exactly 128 characters
if [ ${#input} -ne 128 ]; then
  echo "Input must be exactly 128 characters."
  exit 1
fi

# Split the input into 8 strings of 16 characters each
for i in {0..7}; do
  start=$((i * 16))
  end=$((start + 15))
  substring="${input:$start:16}"
  echo "String $((i + 1)): $substring"
done

# The for loop iterates from 0 to 7, representing the eight 16-character substrings we want to extract from the input string.
# start and end are calculated for each iteration to determine the slice of 16 characters that we want to extract from the input string.
# The ${input:$start:16} syntax is used to extract a substring of 16 characters starting from the start position in the input string.
# The extracted substring is stored in the substring variable.
# Finally, the script prints out each of the eight substrings along with their respective indices.
# Here's a breakdown of what each iteration of the loop does:

# Iteration 1: Extracts characters 1-16 of the input string and prints it as "String 1: ..." (1-based index).
# Iteration 2: Extracts characters 17-32 of the input string and prints it as "String 2: ...", and so on for the remaining iterations.
# So, the script essentially takes the 128-character input, checks its length, and then divides it into eight equal parts, each containing 16 characters, and displays them with their corresponding indices.



